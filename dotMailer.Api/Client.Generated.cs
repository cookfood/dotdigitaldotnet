using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using dotdigital.Api.Resources.Enums;
using dotdigital.Api.Resources.Models;

namespace dotdigital.Api
{
    /// <summary>
    /// Generated by the dotMailer API WADL Parser
    /// </summary>
    public partial class Client
    {
        public static string BaseAddress = "";

        /// <summary>
        /// Deletes an address book.
        /// </summary>
        public ServiceResult DeleteAddressBook(int id)
        {
            return DeleteAddressBookAsync(id).Result;
        }

        /// <summary>
        /// Deletes an address book.
        /// </summary>
        public async Task<ServiceResult> DeleteAddressBookAsync(int id)
        {
            var request = new Request("address-books/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await DeleteAsync(request);
        }

        /// <summary>
        /// Deletes a contact from a given address book.
        /// </summary>
        public ServiceResult DeleteAddressBookContact(int addressBookId, int contactId)
        {
            return DeleteAddressBookContactAsync(addressBookId, contactId).Result;
        }

        /// <summary>
        /// Deletes a contact from a given address book.
        /// </summary>
        public async Task<ServiceResult> DeleteAddressBookContactAsync(int addressBookId, int contactId)
        {
            var request = new Request("address-books/{addressBookId}/contacts/{contactId}",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
                { "contactId", contactId }
            });
            return await DeleteAsync(request);
        }

        /// <summary>
        /// Deletes all contacts from a given address book.
        /// </summary>
        public ServiceResult DeleteAddressBookContacts(int addressBookId)
        {
            return DeleteAddressBookContactsAsync(addressBookId).Result;
        }

        /// <summary>
        /// Deletes all contacts from a given address book.
        /// </summary>
        public async Task<ServiceResult> DeleteAddressBookContactsAsync(int addressBookId)
        {
            var request = new Request("address-books/{addressBookId}/contacts",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId }
            });
            return await DeleteAsync(request);
        }

        /// <summary>
        /// Deletes a campaign, and any associated reporting data. If the campaign is currently in use, or being sent to, this call will not be permitted.
        /// </summary>
        public ServiceResult DeleteCampaign(int campaignId)
        {
            return DeleteCampaignAsync(campaignId).Result;
        }

        /// <summary>
        /// Deletes a campaign, and any associated reporting data. If the campaign is currently in use, or being sent to, this call will not be permitted.
        /// </summary>
        public async Task<ServiceResult> DeleteCampaignAsync(int campaignId)
        {
            var request = new Request("campaigns/{campaignId}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId }
            });
            return await DeleteAsync(request);
        }

        /// <summary>
        /// Removes an attachment from a campaign.
        /// </summary>
        public ServiceResult DeleteCampaignAttachment(int campaignId, int documentId)
        {
            return DeleteCampaignAttachmentAsync(campaignId, documentId).Result;
        }

        /// <summary>
        /// Removes an attachment from a campaign.
        /// </summary>
        public async Task<ServiceResult> DeleteCampaignAttachmentAsync(int campaignId, int documentId)
        {
            var request = new Request("campaigns/{campaignId}/attachments/{documentId}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "documentId", documentId }
            });
            return await DeleteAsync(request);
        }

        /// <summary>
        /// Deletes a contact.
        /// </summary>
        public ServiceResult DeleteContact(int id)
        {
            return DeleteContactAsync(id).Result;
        }

        /// <summary>
        /// Deletes a contact.
        /// </summary>
        public async Task<ServiceResult> DeleteContactAsync(int id)
        {
            var request = new Request("contacts/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await DeleteAsync(request);
        }

        /// <summary>
        /// Deletes a piece of transactional data by key.
        /// </summary>
        public ServiceResult DeleteContactsTransactionalData(string collectionName, string key)
        {
            return DeleteContactsTransactionalDataAsync(collectionName, key).Result;
        }

        /// <summary>
        /// Deletes a piece of transactional data by key.
        /// </summary>
        public async Task<ServiceResult> DeleteContactsTransactionalDataAsync(string collectionName, string key)
        {
            var request = new Request("contacts/transactional-data/{collectionName}/{key}",
            new Dictionary<string, object>
            {
                { "collectionName", collectionName },
                { "key", key }
            });
            return await DeleteAsync(request);
        }

        /// <summary>
        /// Deletes all transactional data for a contact.
        /// </summary>
        public ServiceResult DeleteContactTransactionalData(string collectionName, string email)
        {
            return DeleteContactTransactionalDataAsync(collectionName, email).Result;
        }

        /// <summary>
        /// Deletes all transactional data for a contact.
        /// </summary>
        public async Task<ServiceResult> DeleteContactTransactionalDataAsync(string collectionName, string email)
        {
            var request = new Request("contacts/{email}/transactional-data/{collectionName}",
            new Dictionary<string, object>
            {
                { "collectionName", collectionName },
                { "email", email }
            });
            return await DeleteAsync(request);
        }

        /// <summary>
        /// Deletes all transactional data for a contact.
        /// </summary>
        public ServiceResult DeleteContactTransactionalData(string collectionName, int id)
        {
            return DeleteContactTransactionalDataAsync(collectionName, id).Result;
        }

        /// <summary>
        /// Deletes all transactional data for a contact.
        /// </summary>
        public async Task<ServiceResult> DeleteContactTransactionalDataAsync(string collectionName, int id)
        {
            var request = new Request("contacts/{id}/transactional-data/{collectionName}",
            new Dictionary<string, object>
            {
                { "collectionName", collectionName },
                { "id", id }
            });
            return await DeleteAsync(request);
        }

        /// <summary>
        /// Deletes a data field within the account.
        /// </summary>
        public ServiceResult<ApiDependencyResult> DeleteDataField(string name)
        {
            return DeleteDataFieldAsync(name).Result;
        }

        /// <summary>
        /// Deletes a data field within the account.
        /// </summary>
        public async Task<ServiceResult<ApiDependencyResult>> DeleteDataFieldAsync(string name)
        {
            var request = new Request("data-fields/{name}",
            new Dictionary<string, object>
            {
                { "name", name }
            });
            return await DeleteAsync<ApiDependencyResult>(request);
        }

        /// <summary>
        /// Deletes the preference with the speficied Id
        /// </summary>
        public ServiceResult DeletePreference(int id)
        {
            return DeletePreferenceAsync(id).Result;
        }

        /// <summary>
        /// Deletes the preference with the speficied Id
        /// </summary>
        public async Task<ServiceResult> DeletePreferenceAsync(int id)
        {
            var request = new Request("preference/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await DeleteAsync(request);
        }

        /// <summary>
        /// Gets a summary of information about the current status of the account.
        /// </summary>
        public ServiceResult<ApiAccount> GetAccountInfo()
        {
            return GetAccountInfoAsync().Result;
        }

        /// <summary>
        /// Gets a summary of information about the current status of the account.
        /// </summary>
        public async Task<ServiceResult<ApiAccount>> GetAccountInfoAsync()
        {
            var request = new Request("account-info");
            return await GetAsync<ApiAccount>(request);
        }

        /// <summary>
        /// Gets an address book by ID.
        /// </summary>
        public ServiceResult<ApiAddressBook> GetAddressBookById(int id)
        {
            return GetAddressBookByIdAsync(id).Result;
        }

        /// <summary>
        /// Gets an address book by ID.
        /// </summary>
        public async Task<ServiceResult<ApiAddressBook>> GetAddressBookByIdAsync(int id)
        {
            var request = new Request("address-books/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiAddressBook>(request);
        }

        /// <summary>
        /// Gets any campaigns that have been sent to an address book.
        /// </summary>
        public ServiceResult<ApiCampaignList> GetAddressBookCampaigns(int addressBookId, int? select = null, int? skip = null)
        {
            return GetAddressBookCampaignsAsync(addressBookId, select, skip).Result;
        }

        /// <summary>
        /// Gets any campaigns that have been sent to an address book.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignList>> GetAddressBookCampaignsAsync(int addressBookId, int? select = null, int? skip = null)
        {
            var request = new Request("address-books/{addressBookId}/campaigns?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignList>(request);
        }

        /// <summary>
        /// Gets a list of contacts in a given address book.
        /// </summary>
        public ServiceResult<ApiContactList> GetAddressBookContacts(int addressBookId, bool? withFullData = null, int? select = null, int? skip = null)
        {
            return GetAddressBookContactsAsync(addressBookId, withFullData, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of contacts in a given address book.
        /// </summary>
        public async Task<ServiceResult<ApiContactList>> GetAddressBookContactsAsync(int addressBookId, bool? withFullData = null, int? select = null, int? skip = null)
        {
            var request = new Request("address-books/{addressBookId}/contacts?withFullData={withFullData}&select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
                { "withFullData", withFullData },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactList>(request);
        }

        /// <summary>
        /// Gets a list of contacts who were modified since a given date, in a given address book.
        /// </summary>
        public ServiceResult<ApiContactList> GetAddressBookContactsModifiedSinceDate(int addressBookId, DateTime date, bool? withFullData = null, int? select = null, int? skip = null)
        {
            return GetAddressBookContactsModifiedSinceDateAsync(addressBookId, date, withFullData, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of contacts who were modified since a given date, in a given address book.
        /// </summary>
        public async Task<ServiceResult<ApiContactList>> GetAddressBookContactsModifiedSinceDateAsync(int addressBookId, DateTime date, bool? withFullData = null, int? select = null, int? skip = null)
        {
            var request = new Request("address-books/{addressBookId}/contacts/modified-since/{date}?withFullData={withFullData}&select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
                { "date", date },
                { "withFullData", withFullData },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactList>(request);
        }

        /// <summary>
        /// Gets a list of contact scoring data in specified address book.
        /// </summary>
        public ServiceResult<ApiContactScoreList> GetAddressBookContactsScore(int addressBookId, int? select = null, int? skip = null)
        {
            return GetAddressBookContactsScoreAsync(addressBookId, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of contact scoring data in specified address book.
        /// </summary>
        public async Task<ServiceResult<ApiContactScoreList>> GetAddressBookContactsScoreAsync(int addressBookId, int? select = null, int? skip = null)
        {
            var request = new Request("address-books/{addressBookId}/contacts/score?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactScoreList>(request);
        }

        /// <summary>
        /// Gets a list of contacts who have unsubscribed from a given address book.
        /// </summary>
        public ServiceResult<ApiContactSuppressionList> GetAddressBookContactsUnsubscribedSinceDate(int addressBookId, DateTime date, int? select = null, int? skip = null)
        {
            return GetAddressBookContactsUnsubscribedSinceDateAsync(addressBookId, date, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of contacts who have unsubscribed from a given address book.
        /// </summary>
        public async Task<ServiceResult<ApiContactSuppressionList>> GetAddressBookContactsUnsubscribedSinceDateAsync(int addressBookId, DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("address-books/{addressBookId}/contacts/unsubscribed-since/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactSuppressionList>(request);
        }

        /// <summary>
        /// Gets all address books
        /// </summary>
        public ServiceResult<ApiAddressBookList> GetAddressBooks(int? select = null, int? skip = null)
        {
            return GetAddressBooksAsync(select, skip).Result;
        }

        /// <summary>
        /// Gets all address books
        /// </summary>
        public async Task<ServiceResult<ApiAddressBookList>> GetAddressBooksAsync(int? select = null, int? skip = null)
        {
            var request = new Request("address-books?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiAddressBookList>(request);
        }

        /// <summary>
        /// Gets all private address books
        /// </summary>
        public ServiceResult<ApiAddressBookList> GetAddressBooksPrivate(int? select = null, int? skip = null)
        {
            return GetAddressBooksPrivateAsync(select, skip).Result;
        }

        /// <summary>
        /// Gets all private address books
        /// </summary>
        public async Task<ServiceResult<ApiAddressBookList>> GetAddressBooksPrivateAsync(int? select = null, int? skip = null)
        {
            var request = new Request("address-books/private?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiAddressBookList>(request);
        }

        /// <summary>
        /// Gets all public address books
        /// </summary>
        public ServiceResult<ApiAddressBookList> GetAddressBooksPublic(int? select = null, int? skip = null)
        {
            return GetAddressBooksPublicAsync(select, skip).Result;
        }

        /// <summary>
        /// Gets all public address books
        /// </summary>
        public async Task<ServiceResult<ApiAddressBookList>> GetAddressBooksPublicAsync(int? select = null, int? skip = null)
        {
            var request = new Request("address-books/public?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiAddressBookList>(request);
        }

        /// <summary>
        /// Gets a list of contacts who were sent a campaign, with their activity.
        /// </summary>
        public ServiceResult<ApiCampaignContactSummaryList> GetCampaignActivities(int campaignId, int? select = null, int? skip = null)
        {
            return GetCampaignActivitiesAsync(campaignId, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of contacts who were sent a campaign, with their activity.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactSummaryList>> GetCampaignActivitiesAsync(int campaignId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/activities?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactSummaryList>(request);
        }

        /// <summary>
        /// Gets a list of contacts who were sent a campaign, and retrieves only those contacts who showed activity (e.g. they clicked, opened) after a specified date.
        /// </summary>
        public ServiceResult<ApiCampaignContactSummaryList> GetCampaignActivitiesSinceDateByDate(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            return GetCampaignActivitiesSinceDateByDateAsync(campaignId, date, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of contacts who were sent a campaign, and retrieves only those contacts who showed activity (e.g. they clicked, opened) after a specified date.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactSummaryList>> GetCampaignActivitiesSinceDateByDateAsync(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/activities/since-date/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactSummaryList>(request);
        }

        /// <summary>
        /// Gets activity for a given contact and campaign.
        /// </summary>
        public ServiceResult<ApiCampaignContactSummary> GetCampaignActivityByContactId(int campaignId, int contactId)
        {
            return GetCampaignActivityByContactIdAsync(campaignId, contactId).Result;
        }

        /// <summary>
        /// Gets activity for a given contact and campaign.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactSummary>> GetCampaignActivityByContactIdAsync(int campaignId, int contactId)
        {
            var request = new Request("campaigns/{campaignId}/activities/{contactId}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "contactId", contactId }
            });
            return await GetAsync<ApiCampaignContactSummary>(request);
        }

        /// <summary>
        /// Gets a list of campaign link clicks for a contact.
        /// </summary>
        public ServiceResult<ApiCampaignContactClickList> GetCampaignActivityClicks(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            return GetCampaignActivityClicksAsync(campaignId, contactId, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of campaign link clicks for a contact.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactClickList>> GetCampaignActivityClicksAsync(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/activities/{contactId}/clicks?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "contactId", contactId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactClickList>(request);
        }

        public ServiceResult<ApiCampaignContactClickWithGroupsList> GetCampaignActivityClicksWithGroups(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            return GetCampaignActivityClicksWithGroupsAsync(campaignId, contactId, select, skip).Result;
        }

        public async Task<ServiceResult<ApiCampaignContactClickWithGroupsList>> GetCampaignActivityClicksWithGroupsAsync(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/activities/{contactId}/clicks-with-groups?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "contactId", contactId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactClickWithGroupsList>(request);
        }

        /// <summary>
        /// Gets a list of campaign opens for a contact.
        /// </summary>
        public ServiceResult<ApiCampaignContactOpenList> GetCampaignActivityOpens(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            return GetCampaignActivityOpensAsync(campaignId, contactId, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of campaign opens for a contact.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactOpenList>> GetCampaignActivityOpensAsync(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/activities/{contactId}/opens?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "contactId", contactId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactOpenList>(request);
        }

        /// <summary>
        /// Gets a list of page views for a contact.
        /// </summary>
        public ServiceResult<ApiCampaignContactPageViewList> GetCampaignActivityPageViews(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            return GetCampaignActivityPageViewsAsync(campaignId, contactId, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of page views for a contact.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactPageViewList>> GetCampaignActivityPageViewsAsync(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/activities/{contactId}/page-views?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "contactId", contactId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactPageViewList>(request);
        }

        /// <summary>
        /// Gets a list of campaign replies for a contact. You may not request more than 5 records at a time using the "select" parameter.
        /// </summary>
        public ServiceResult<ApiCampaignContactReplyList> GetCampaignActivityReplies(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            return GetCampaignActivityRepliesAsync(campaignId, contactId, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of campaign replies for a contact. You may not request more than 5 records at a time using the "select" parameter.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactReplyList>> GetCampaignActivityRepliesAsync(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/activities/{contactId}/replies?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "contactId", contactId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactReplyList>(request);
        }

        /// <summary>
        /// Gets a list of ROI information for a contact.
        /// </summary>
        public ServiceResult<ApiCampaignContactRoiDetailList> GetCampaignActivityRoiDetails(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            return GetCampaignActivityRoiDetailsAsync(campaignId, contactId, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of ROI information for a contact.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactRoiDetailList>> GetCampaignActivityRoiDetailsAsync(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/activities/{contactId}/roi-details?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "contactId", contactId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactRoiDetailList>(request);
        }

        /// <summary>
        /// Gets campaign social bookmark views for a contact.
        /// </summary>
        public ServiceResult<ApiCampaignContactSocialBookmarkViewList> GetCampaignActivitySocialBookmarkViews(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            return GetCampaignActivitySocialBookmarkViewsAsync(campaignId, contactId, select, skip).Result;
        }

        /// <summary>
        /// Gets campaign social bookmark views for a contact.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactSocialBookmarkViewList>> GetCampaignActivitySocialBookmarkViewsAsync(int campaignId, int contactId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/activities/{contactId}/social-bookmark-views?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "contactId", contactId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactSocialBookmarkViewList>(request);
        }

        /// <summary>
        /// Gets any address books that a campaign has ever been sent to.
        /// </summary>
        public ServiceResult<ApiAddressBookList> GetCampaignAddressBooks(int campaignId, int? select = null, int? skip = null)
        {
            return GetCampaignAddressBooksAsync(campaignId, select, skip).Result;
        }

        /// <summary>
        /// Gets any address books that a campaign has ever been sent to.
        /// </summary>
        public async Task<ServiceResult<ApiAddressBookList>> GetCampaignAddressBooksAsync(int campaignId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/address-books?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiAddressBookList>(request);
        }

        /// <summary>
        /// Gets documents that are currently attached to a campaign.
        /// </summary>
        public ServiceResult<ApiDocumentList> GetCampaignAttachments(int campaignId)
        {
            return GetCampaignAttachmentsAsync(campaignId).Result;
        }

        /// <summary>
        /// Gets documents that are currently attached to a campaign.
        /// </summary>
        public async Task<ServiceResult<ApiDocumentList>> GetCampaignAttachmentsAsync(int campaignId)
        {
            var request = new Request("campaigns/{campaignId}/attachments",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId }
            });
            return await GetAsync<ApiDocumentList>(request);
        }

        /// <summary>
        /// Gets a campaign by ID.
        /// </summary>
        public ServiceResult<ApiCampaign> GetCampaignById(int id)
        {
            return GetCampaignByIdAsync(id).Result;
        }

        /// <summary>
        /// Gets a campaign by ID.
        /// </summary>
        public async Task<ServiceResult<ApiCampaign>> GetCampaignByIdAsync(int id)
        {
            var request = new Request("campaigns/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiCampaign>(request);
        }

        /// <summary>
        /// Gets a list of campaign link clicks.
        /// </summary>
        public ServiceResult<ApiCampaignContactClickList> GetCampaignClicks(int campaignId, int? select = null, int? skip = null)
        {
            return GetCampaignClicksAsync(campaignId, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of campaign link clicks.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactClickList>> GetCampaignClicksAsync(int campaignId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/clicks?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactClickList>(request);
        }

        /// <summary>
        /// Gets a list of link clicks for a campaign after a specified date
        /// </summary>
        public ServiceResult<ApiCampaignContactClickList> GetCampaignClicksSinceDateByDate(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            return GetCampaignClicksSinceDateByDateAsync(campaignId, date, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of link clicks for a campaign after a specified date
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactClickList>> GetCampaignClicksSinceDateByDateAsync(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/clicks/since-date/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactClickList>(request);
        }

        public ServiceResult<ApiCampaignContactClickWithGroupsList> GetCampaignClicksWithGroups(int campaignId, int? select = null, int? skip = null)
        {
            return GetCampaignClicksWithGroupsAsync(campaignId, select, skip).Result;
        }

        public async Task<ServiceResult<ApiCampaignContactClickWithGroupsList>> GetCampaignClicksWithGroupsAsync(int campaignId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/clicks-with-groups?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactClickWithGroupsList>(request);
        }

        public ServiceResult<ApiCampaignContactClickWithGroupsList> GetCampaignClicksWithGroupsSinceDateByDate(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            return GetCampaignClicksWithGroupsSinceDateByDateAsync(campaignId, date, select, skip).Result;
        }

        public async Task<ServiceResult<ApiCampaignContactClickWithGroupsList>> GetCampaignClicksWithGroupsSinceDateByDateAsync(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/clicks-with-groups/since-date/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactClickWithGroupsList>(request);
        }

        /// <summary>
        /// Gets a list of contacts who hard bounced when sent a particular campaign.
        /// </summary>
        public ServiceResult<ApiContactList> GetCampaignHardBouncingContacts(int campaignId, bool? withFullData = null, int? select = null, int? skip = null)
        {
            return GetCampaignHardBouncingContactsAsync(campaignId, withFullData, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of contacts who hard bounced when sent a particular campaign.
        /// </summary>
        public async Task<ServiceResult<ApiContactList>> GetCampaignHardBouncingContactsAsync(int campaignId, bool? withFullData = null, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/hard-bouncing-contacts?withFullData={withFullData}&select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "withFullData", withFullData },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactList>(request);
        }

        /// <summary>
        /// Gets a list of campaign opens.
        /// </summary>
        public ServiceResult<ApiCampaignContactOpenList> GetCampaignOpens(int campaignId, int? select = null, int? skip = null)
        {
            return GetCampaignOpensAsync(campaignId, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of campaign opens.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactOpenList>> GetCampaignOpensAsync(int campaignId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/opens?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactOpenList>(request);
        }

        /// <summary>
        /// Gets a list of opens for a campaign after a specified date
        /// </summary>
        public ServiceResult<ApiCampaignContactOpenList> GetCampaignOpensSinceDateByDate(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            return GetCampaignOpensSinceDateByDateAsync(campaignId, date, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of opens for a campaign after a specified date
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactOpenList>> GetCampaignOpensSinceDateByDateAsync(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/opens/since-date/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactOpenList>(request);
        }

        /// <summary>
        /// Gets a list of page views for a campaign after a specified date.
        /// </summary>
        public ServiceResult<ApiCampaignContactPageViewList> GetCampaignPageViewsSinceDateByDate(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            return GetCampaignPageViewsSinceDateByDateAsync(campaignId, date, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of page views for a campaign after a specified date.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactPageViewList>> GetCampaignPageViewsSinceDateByDateAsync(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/page-views/since-date/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactPageViewList>(request);
        }

        /// <summary>
        /// Retrieves a list of ROI information for a campaign after the specified date.
        /// </summary>
        public ServiceResult<ApiCampaignContactRoiDetailList> GetCampaignRoiDetailsSinceDateByDate(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            return GetCampaignRoiDetailsSinceDateByDateAsync(campaignId, date, select, skip).Result;
        }

        /// <summary>
        /// Retrieves a list of ROI information for a campaign after the specified date.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactRoiDetailList>> GetCampaignRoiDetailsSinceDateByDateAsync(int campaignId, DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/roi-details/since-date/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactRoiDetailList>(request);
        }

        /// <summary>
        /// Gets all campaigns
        /// </summary>
        public ServiceResult<ApiCampaignList> GetCampaigns(int? select = null, int? skip = null)
        {
            return GetCampaignsAsync(select, skip).Result;
        }

        /// <summary>
        /// Gets all campaigns
        /// </summary>
        public async Task<ServiceResult<ApiCampaignList>> GetCampaignsAsync(int? select = null, int? skip = null)
        {
            var request = new Request("campaigns?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignList>(request);
        }

        /// <summary>
        /// Gets campaign social bookmark views for a campaign.
        /// </summary>
        public ServiceResult<ApiCampaignContactSocialBookmarkViewList> GetCampaignSocialBookmarkViews(int campaignId, int? select = null, int? skip = null)
        {
            return GetCampaignSocialBookmarkViewsAsync(campaignId, select, skip).Result;
        }

        /// <summary>
        /// Gets campaign social bookmark views for a campaign.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignContactSocialBookmarkViewList>> GetCampaignSocialBookmarkViewsAsync(int campaignId, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/{campaignId}/social-bookmark-views?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignContactSocialBookmarkViewList>(request);
        }

        /// <summary>
        /// Gets the split test results of a given campaign.
        /// </summary>
        public ServiceResult<ApiCampaignSplitTestResults> GetCampaignSplitTest(int campaignId)
        {
            return GetCampaignSplitTestAsync(campaignId).Result;
        }

        /// <summary>
        /// Gets the split test results of a given campaign.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignSplitTestResults>> GetCampaignSplitTestAsync(int campaignId)
        {
            var request = new Request("campaigns/{campaignId}/split-test",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId }
            });
            return await GetAsync<ApiCampaignSplitTestResults>(request);
        }

        /// <summary>
        /// Gets the send status using send ID.
        /// </summary>
        public ServiceResult<ApiCampaignSend> GetCampaignsSendBySendId(Guid sendId)
        {
            return GetCampaignsSendBySendIdAsync(sendId).Result;
        }

        /// <summary>
        /// Gets the send status using send ID.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignSend>> GetCampaignsSendBySendIdAsync(Guid sendId)
        {
            var request = new Request("campaigns/send/{sendId}",
            new Dictionary<string, object>
            {
                { "sendId", sendId }
            });
            return await GetAsync<ApiCampaignSend>(request);
        }

        /// <summary>
        /// Gets a summary of reporting information for a specified campaign.
        /// </summary>
        public ServiceResult<ApiCampaignSummary> GetCampaignSummary(int campaignId)
        {
            return GetCampaignSummaryAsync(campaignId).Result;
        }

        /// <summary>
        /// Gets a summary of reporting information for a specified campaign.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignSummary>> GetCampaignSummaryAsync(int campaignId)
        {
            var request = new Request("campaigns/{campaignId}/summary",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId }
            });
            return await GetAsync<ApiCampaignSummary>(request);
        }

        /// <summary>
        /// Gets all sent campaigns, which have had activity (e.g. clicks, opens) after a specified date.
        /// </summary>
        public ServiceResult<ApiCampaignList> GetCampaignsWithActivitySinceDate(DateTime date, int? select = null, int? skip = null)
        {
            return GetCampaignsWithActivitySinceDateAsync(date, select, skip).Result;
        }

        /// <summary>
        /// Gets all sent campaigns, which have had activity (e.g. clicks, opens) after a specified date.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignList>> GetCampaignsWithActivitySinceDateAsync(DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("campaigns/with-activity-since/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignList>(request);
        }

        /// <summary>
        /// Gets a campaign by ID with additional information like type and assigned tags
        /// </summary>
        public ServiceResult<ApiCampaignDetails> GetCampaignWithDetails(int campaignId)
        {
            return GetCampaignWithDetailsAsync(campaignId).Result;
        }

        /// <summary>
        /// Gets a campaign by ID with additional information like type and assigned tags
        /// </summary>
        public async Task<ServiceResult<ApiCampaignDetails>> GetCampaignWithDetailsAsync(int campaignId)
        {
            var request = new Request("campaigns/{campaignId}/with-details",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId }
            });
            return await GetAsync<ApiCampaignDetails>(request);
        }

        /// <summary>
        /// Gets any address books that a contact is in.
        /// </summary>
        public ServiceResult<ApiAddressBookList> GetContactAddressBooks(int contactId, int? select = null, int? skip = null)
        {
            return GetContactAddressBooksAsync(contactId, select, skip).Result;
        }

        /// <summary>
        /// Gets any address books that a contact is in.
        /// </summary>
        public async Task<ServiceResult<ApiAddressBookList>> GetContactAddressBooksAsync(int contactId, int? select = null, int? skip = null)
        {
            var request = new Request("contacts/{contactId}/address-books?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "contactId", contactId },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiAddressBookList>(request);
        }

        /// <summary>
        /// Gets a contact by email address.
        /// </summary>
        public ServiceResult<ApiContact> GetContactByEmail(string email)
        {
            return GetContactByEmailAsync(email).Result;
        }

        /// <summary>
        /// Gets a contact by email address.
        /// </summary>
        public async Task<ServiceResult<ApiContact>> GetContactByEmailAsync(string email)
        {
            var request = new Request("contacts/{email}",
            new Dictionary<string, object>
            {
                { "email", email }
            });
            return await GetAsync<ApiContact>(request);
        }

        /// <summary>
        /// Gets a contact by ID. Unsubscribed or suppressed contacts will not be retrieved.
        /// </summary>
        public ServiceResult<ApiContact> GetContactById(int id)
        {
            return GetContactByIdAsync(id).Result;
        }

        /// <summary>
        /// Gets a contact by ID. Unsubscribed or suppressed contacts will not be retrieved.
        /// </summary>
        public async Task<ServiceResult<ApiContact>> GetContactByIdAsync(int id)
        {
            var request = new Request("contacts/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiContact>(request);
        }

        /// <summary>
        /// Gets the preferences for the specified contact
        /// </summary>
        public ServiceResult<ApiPreferenceList> GetContactPreferences(string contactEmail)
        {
            return GetContactPreferencesAsync(contactEmail).Result;
        }

        /// <summary>
        /// Gets the preferences for the specified contact
        /// </summary>
        public async Task<ServiceResult<ApiPreferenceList>> GetContactPreferencesAsync(string contactEmail)
        {
            var request = new Request("contact/{contactEmail}/preferences",
            new Dictionary<string, object>
            {
                { "contactEmail", contactEmail }
            });
            return await GetAsync<ApiPreferenceList>(request);
        }

        /// <summary>
        /// Gets the preferences for the specified contact
        /// </summary>
        public ServiceResult<ApiPreferenceList> GetContactPreferences(int contactID)
        {
            return GetContactPreferencesAsync(contactID).Result;
        }

        /// <summary>
        /// Gets the preferences for the specified contact
        /// </summary>
        public async Task<ServiceResult<ApiPreferenceList>> GetContactPreferencesAsync(int contactID)
        {
            var request = new Request("contact/{contactID}/preferences",
            new Dictionary<string, object>
            {
                { "contactID", contactID }
            });
            return await GetAsync<ApiPreferenceList>(request);
        }

        /// <summary>
        /// Gets a list of all contacts in the account
        /// </summary>
        public ServiceResult<ApiContactList> GetContacts(bool? withFullData = null, int? select = null, int? skip = null)
        {
            return GetContactsAsync(withFullData, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of all contacts in the account
        /// </summary>
        public async Task<ServiceResult<ApiContactList>> GetContactsAsync(bool? withFullData = null, int? select = null, int? skip = null)
        {
            var request = new Request("contacts?withFullData={withFullData}&select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "withFullData", withFullData },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactList>(request);
        }

        /// <summary>
        /// Gets particular contact scoring data.
        /// </summary>
        public ServiceResult<ApiContactScore> GetContactScore(string email)
        {
            return GetContactScoreAsync(email).Result;
        }

        /// <summary>
        /// Gets particular contact scoring data.
        /// </summary>
        public async Task<ServiceResult<ApiContactScore>> GetContactScoreAsync(string email)
        {
            var request = new Request("contacts/{email}/score",
            new Dictionary<string, object>
            {
                { "email", email }
            });
            return await GetAsync<ApiContactScore>(request);
        }

        /// <summary>
        /// Gets particular contact scoring data.
        /// </summary>
        public ServiceResult<ApiContactScore> GetContactScore(int id)
        {
            return GetContactScoreAsync(id).Result;
        }

        /// <summary>
        /// Gets particular contact scoring data.
        /// </summary>
        public async Task<ServiceResult<ApiContactScore>> GetContactScoreAsync(int id)
        {
            var request = new Request("contacts/{id}/score",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiContactScore>(request);
        }

        /// <summary>
        /// Gets the total number of contacts in an account.
        /// </summary>
        public ServiceResult<int> GetContactsCount()
        {
            return GetContactsCountAsync().Result;
        }

        /// <summary>
        /// Gets the total number of contacts in an account.
        /// </summary>
        public async Task<ServiceResult<int>> GetContactsCountAsync()
        {
            var request = new Request("contacts/count");
            return await GetAsync<int>(request);
        }

        /// <summary>
        /// Gets a list of created contacts after a specified date.
        /// </summary>
        public ServiceResult<ApiContactList> GetContactsCreatedSinceDate(DateTime date, bool? withFullData = null, int? select = null, int? skip = null)
        {
            return GetContactsCreatedSinceDateAsync(date, withFullData, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of created contacts after a specified date.
        /// </summary>
        public async Task<ServiceResult<ApiContactList>> GetContactsCreatedSinceDateAsync(DateTime date, bool? withFullData = null, int? select = null, int? skip = null)
        {
            var request = new Request("contacts/created-since/{date}?withFullData={withFullData}&select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "date", date },
                { "withFullData", withFullData },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactList>(request);
        }

        /// <summary>
        /// Gets the total number of contacts in an account.
        /// </summary>
        public ServiceResult<int> GetContactsGetAllContactsCount()
        {
            return GetContactsGetAllContactsCountAsync().Result;
        }

        /// <summary>
        /// Gets the total number of contacts in an account.
        /// </summary>
        public async Task<ServiceResult<int>> GetContactsGetAllContactsCountAsync()
        {
            var request = new Request("contacts/get-all-contacts-count");
            return await GetAsync<int>(request);
        }

        /// <summary>
        /// Gets the import status of a previously started contact import.
        /// </summary>
        public ServiceResult<ApiContactImport> GetContactsImportByImportId(Guid importId)
        {
            return GetContactsImportByImportIdAsync(importId).Result;
        }

        /// <summary>
        /// Gets the import status of a previously started contact import.
        /// </summary>
        public async Task<ServiceResult<ApiContactImport>> GetContactsImportByImportIdAsync(Guid importId)
        {
            var request = new Request("contacts/import/{importId}",
            new Dictionary<string, object>
            {
                { "importId", importId }
            });
            return await GetAsync<ApiContactImport>(request);
        }

        /// <summary>
        /// Gets a report with statistics about what was successfully imported, and what was unable to be imported.
        /// </summary>
        public ServiceResult<ApiContactImportReport> GetContactsImportReport(Guid importId)
        {
            return GetContactsImportReportAsync(importId).Result;
        }

        /// <summary>
        /// Gets a report with statistics about what was successfully imported, and what was unable to be imported.
        /// </summary>
        public async Task<ServiceResult<ApiContactImportReport>> GetContactsImportReportAsync(Guid importId)
        {
            var request = new Request("contacts/import/{importId}/report",
            new Dictionary<string, object>
            {
                { "importId", importId }
            });
            return await GetAsync<ApiContactImportReport>(request);
        }

        /// <summary>
        /// Gets all records that were not successfully imported. The data are returned in CSV file, which is UTF-8 encoded. This data will only be available for approximately one week after import.
        /// </summary>
        public ServiceResult GetContactsImportReportFaults(Guid importId)
        {
            return GetContactsImportReportFaultsAsync(importId).Result;
        }

        /// <summary>
        /// Gets all records that were not successfully imported. The data are returned in CSV file, which is UTF-8 encoded. This data will only be available for approximately one week after import.
        /// </summary>
        public async Task<ServiceResult> GetContactsImportReportFaultsAsync(Guid importId)
        {
            var request = new Request("contacts/import/{importId}/report-faults",
            new Dictionary<string, object>
            {
                { "importId", importId }
            });
            return await GetAsync(request);
        }

        /// <summary>
        /// Gets a list of contacts, from a given address book, who have opted in to a preference, since the specified date
        /// </summary>
        public ServiceResult GetContactsInBookPreferenceOptInsSinceSinceDate(int bookId, int preferenceId, DateTime sinceDate, int? minContactId = null)
        {
            return GetContactsInBookPreferenceOptInsSinceSinceDateAsync(bookId, preferenceId, sinceDate, minContactId).Result;
        }

        /// <summary>
        /// Gets a list of contacts, from a given address book, who have opted in to a preference, since the specified date
        /// </summary>
        public async Task<ServiceResult> GetContactsInBookPreferenceOptInsSinceSinceDateAsync(int bookId, int preferenceId, DateTime sinceDate, int? minContactId = null)
        {
            var request = new Request("contacts/in-book/{bookId}/preference/{preferenceId}/opt-ins-since/{sinceDate}?minContactId={minContactId}",
            new Dictionary<string, object>
            {
                { "bookId", bookId },
                { "preferenceId", preferenceId },
                { "sinceDate", sinceDate },
                { "minContactId", minContactId }
            });
            return await GetAsync(request);
        }

        /// <summary>
        /// Gets a list of contacts from a given address book, subscribed to the specified preference
        /// </summary>
        public ServiceResult GetContactsInBookWithPreferenceByPreferenceId(int bookId, int preferenceId, int? minContactId = null)
        {
            return GetContactsInBookWithPreferenceByPreferenceIdAsync(bookId, preferenceId, minContactId).Result;
        }

        /// <summary>
        /// Gets a list of contacts from a given address book, subscribed to the specified preference
        /// </summary>
        public async Task<ServiceResult> GetContactsInBookWithPreferenceByPreferenceIdAsync(int bookId, int preferenceId, int? minContactId = null)
        {
            var request = new Request("contacts/in-book/{bookId}/with-preference/{preferenceId}?minContactId={minContactId}",
            new Dictionary<string, object>
            {
                { "bookId", bookId },
                { "preferenceId", preferenceId },
                { "minContactId", minContactId }
            });
            return await GetAsync(request);
        }

        /// <summary>
        /// Gets a list of modified contacts after a specified date.
        /// </summary>
        public ServiceResult<ApiContactList> GetContactsModifiedSinceDate(DateTime date, bool? withFullData = null, int? select = null, int? skip = null)
        {
            return GetContactsModifiedSinceDateAsync(date, withFullData, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of modified contacts after a specified date.
        /// </summary>
        public async Task<ServiceResult<ApiContactList>> GetContactsModifiedSinceDateAsync(DateTime date, bool? withFullData = null, int? select = null, int? skip = null)
        {
            var request = new Request("contacts/modified-since/{date}?withFullData={withFullData}&select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "date", date },
                { "withFullData", withFullData },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactList>(request);
        }

        /// <summary>
        /// Gets a list of contacts who have opted in to a preference since the specified date
        /// </summary>
        public ServiceResult GetContactsPreferenceOptInsSinceSinceDate(int preferenceId, DateTime sinceDate, int? minContactId = null)
        {
            return GetContactsPreferenceOptInsSinceSinceDateAsync(preferenceId, sinceDate, minContactId).Result;
        }

        /// <summary>
        /// Gets a list of contacts who have opted in to a preference since the specified date
        /// </summary>
        public async Task<ServiceResult> GetContactsPreferenceOptInsSinceSinceDateAsync(int preferenceId, DateTime sinceDate, int? minContactId = null)
        {
            var request = new Request("contacts/preference/{preferenceId}/opt-ins-since/{sinceDate}?minContactId={minContactId}",
            new Dictionary<string, object>
            {
                { "preferenceId", preferenceId },
                { "sinceDate", sinceDate },
                { "minContactId", minContactId }
            });
            return await GetAsync(request);
        }

        /// <summary>
        /// Gets a list of contact scoring data.
        /// </summary>
        public ServiceResult<ApiContactScoreList> GetContactsScore(int? select = null, int? skip = null)
        {
            return GetContactsScoreAsync(select, skip).Result;
        }

        /// <summary>
        /// Gets a list of contact scoring data.
        /// </summary>
        public async Task<ServiceResult<ApiContactScoreList>> GetContactsScoreAsync(int? select = null, int? skip = null)
        {
            var request = new Request("contacts/score?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactScoreList>(request);
        }

        /// <summary>
        /// Gets a list of contact scoring data ordered by modified date.
        /// </summary>
        public ServiceResult<ApiContactScoreList> GetContactsScoreModifiedSinceDate(DateTime date, int? select = null, int? skip = null)
        {
            return GetContactsScoreModifiedSinceDateAsync(date, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of contact scoring data ordered by modified date.
        /// </summary>
        public async Task<ServiceResult<ApiContactScoreList>> GetContactsScoreModifiedSinceDateAsync(DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("contacts/score/modified-since/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactScoreList>(request);
        }

        /// <summary>
        /// Gets a list of suppressed contacts after a given date along with the reason for suppression.
        /// </summary>
        public ServiceResult<ApiContactSuppressionList> GetContactsSuppressedSinceDate(DateTime date, int? select = null, int? skip = null)
        {
            return GetContactsSuppressedSinceDateAsync(date, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of suppressed contacts after a given date along with the reason for suppression.
        /// </summary>
        public async Task<ServiceResult<ApiContactSuppressionList>> GetContactsSuppressedSinceDateAsync(DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("contacts/suppressed-since/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactSuppressionList>(request);
        }

        /// <summary>
        /// Gets a piece of transactional data by key.
        /// </summary>
        public ServiceResult<ApiTransactionalData> GetContactsTransactionalDataByKey(string collectionName, string key)
        {
            return GetContactsTransactionalDataByKeyAsync(collectionName, key).Result;
        }

        /// <summary>
        /// Gets a piece of transactional data by key.
        /// </summary>
        public async Task<ServiceResult<ApiTransactionalData>> GetContactsTransactionalDataByKeyAsync(string collectionName, string key)
        {
            var request = new Request("contacts/transactional-data/{collectionName}/{key}",
            new Dictionary<string, object>
            {
                { "collectionName", collectionName },
                { "key", key }
            });
            return await GetAsync<ApiTransactionalData>(request);
        }

        /// <summary>
        /// Gets the import status of a previously started transactional import.
        /// </summary>
        public ServiceResult<ApiTransactionalDataImport> GetContactsTransactionalDataImportByImportId(Guid importId)
        {
            return GetContactsTransactionalDataImportByImportIdAsync(importId).Result;
        }

        /// <summary>
        /// Gets the import status of a previously started transactional import.
        /// </summary>
        public async Task<ServiceResult<ApiTransactionalDataImport>> GetContactsTransactionalDataImportByImportIdAsync(Guid importId)
        {
            var request = new Request("contacts/transactional-data/import/{importId}",
            new Dictionary<string, object>
            {
                { "importId", importId }
            });
            return await GetAsync<ApiTransactionalDataImport>(request);
        }

        /// <summary>
        /// Gets a report with statistics about what was successfully imported, and what was unable to be imported.
        /// </summary>
        public ServiceResult<ApiTransactionalDataImportReport> GetContactsTransactionalDataImportReport(Guid importId)
        {
            return GetContactsTransactionalDataImportReportAsync(importId).Result;
        }

        /// <summary>
        /// Gets a report with statistics about what was successfully imported, and what was unable to be imported.
        /// </summary>
        public async Task<ServiceResult<ApiTransactionalDataImportReport>> GetContactsTransactionalDataImportReportAsync(Guid importId)
        {
            var request = new Request("contacts/transactional-data/import/{importId}/report",
            new Dictionary<string, object>
            {
                { "importId", importId }
            });
            return await GetAsync<ApiTransactionalDataImportReport>(request);
        }

        /// <summary>
        /// Gets the subscriptions for the specified contact
        /// </summary>
        public ServiceResult GetContactSubscriptions(string contactEmail)
        {
            return GetContactSubscriptionsAsync(contactEmail).Result;
        }

        /// <summary>
        /// Gets the subscriptions for the specified contact
        /// </summary>
        public async Task<ServiceResult> GetContactSubscriptionsAsync(string contactEmail)
        {
            var request = new Request("contact/{contactEmail}/subscriptions",
            new Dictionary<string, object>
            {
                { "contactEmail", contactEmail }
            });
            return await GetAsync(request);
        }

        /// <summary>
        /// Gets a list of unsubscribed contacts who unsubscribed after a given date.
        /// </summary>
        public ServiceResult<ApiContactSuppressionList> GetContactsUnsubscribedSinceDate(DateTime date, int? select = null, int? skip = null)
        {
            return GetContactsUnsubscribedSinceDateAsync(date, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of unsubscribed contacts who unsubscribed after a given date.
        /// </summary>
        public async Task<ServiceResult<ApiContactSuppressionList>> GetContactsUnsubscribedSinceDateAsync(DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("contacts/unsubscribed-since/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiContactSuppressionList>(request);
        }

        /// <summary>
        /// Gets a list of contacts subscribed to the specified preference
        /// </summary>
        public ServiceResult GetContactsWithPreferenceByPreferenceId(int preferenceId, int? minContactId = null)
        {
            return GetContactsWithPreferenceByPreferenceIdAsync(preferenceId, minContactId).Result;
        }

        /// <summary>
        /// Gets a list of contacts subscribed to the specified preference
        /// </summary>
        public async Task<ServiceResult> GetContactsWithPreferenceByPreferenceIdAsync(int preferenceId, int? minContactId = null)
        {
            var request = new Request("contacts/with-preference/{preferenceId}?minContactId={minContactId}",
            new Dictionary<string, object>
            {
                { "preferenceId", preferenceId },
                { "minContactId", minContactId }
            });
            return await GetAsync(request);
        }

        /// <summary>
        /// Gets a list of all transactional data for a contact (100 most recent only).
        /// </summary>
        public ServiceResult<ApiTransactionalDataList> GetContactTransactionalDataByCollectionName(string collectionName, string email)
        {
            return GetContactTransactionalDataByCollectionNameAsync(collectionName, email).Result;
        }

        /// <summary>
        /// Gets a list of all transactional data for a contact (100 most recent only).
        /// </summary>
        public async Task<ServiceResult<ApiTransactionalDataList>> GetContactTransactionalDataByCollectionNameAsync(string collectionName, string email)
        {
            var request = new Request("contacts/{email}/transactional-data/{collectionName}",
            new Dictionary<string, object>
            {
                { "collectionName", collectionName },
                { "email", email }
            });
            return await GetAsync<ApiTransactionalDataList>(request);
        }

        /// <summary>
        /// Gets a list of all transactional data for a contact (100 most recent only).
        /// </summary>
        public ServiceResult<ApiTransactionalDataList> GetContactTransactionalDataByCollectionName(string collectionName, int id)
        {
            return GetContactTransactionalDataByCollectionNameAsync(collectionName, id).Result;
        }

        /// <summary>
        /// Gets a list of all transactional data for a contact (100 most recent only).
        /// </summary>
        public async Task<ServiceResult<ApiTransactionalDataList>> GetContactTransactionalDataByCollectionNameAsync(string collectionName, int id)
        {
            var request = new Request("contacts/{id}/transactional-data/{collectionName}",
            new Dictionary<string, object>
            {
                { "collectionName", collectionName },
                { "id", id }
            });
            return await GetAsync<ApiTransactionalDataList>(request);
        }

        /// <summary>
        /// Gets a contact by email address with consent records.
        /// </summary>
        public ServiceResult<ApiContactWithConsent> GetContactWithConsent(string email)
        {
            return GetContactWithConsentAsync(email).Result;
        }

        /// <summary>
        /// Gets a contact by email address with consent records.
        /// </summary>
        public async Task<ServiceResult<ApiContactWithConsent>> GetContactWithConsentAsync(string email)
        {
            var request = new Request("contacts/{email}/with-consent",
            new Dictionary<string, object>
            {
                { "email", email }
            });
            return await GetAsync<ApiContactWithConsent>(request);
        }

        /// <summary>
        /// Gets a contact by ID with consent records
        /// </summary>
        public ServiceResult<ApiContactWithConsent> GetContactWithConsent(int id)
        {
            return GetContactWithConsentAsync(id).Result;
        }

        /// <summary>
        /// Gets a contact by ID with consent records
        /// </summary>
        public async Task<ServiceResult<ApiContactWithConsent>> GetContactWithConsentAsync(int id)
        {
            var request = new Request("contacts/{id}/with-consent",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiContactWithConsent>(request);
        }

        /// <summary>
        /// Gets all custom from addresses which can be used in a campaign.
        /// </summary>
        public ServiceResult<ApiCampaignFromAddressList> GetCustomFromAddresses(int? select = null, int? skip = null)
        {
            return GetCustomFromAddressesAsync(select, skip).Result;
        }

        /// <summary>
        /// Gets all custom from addresses which can be used in a campaign.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignFromAddressList>> GetCustomFromAddressesAsync(int? select = null, int? skip = null)
        {
            var request = new Request("custom-from-addresses?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiCampaignFromAddressList>(request);
        }

        /// <summary>
        /// Lists the data fields within the account.
        /// </summary>
        public ServiceResult<ApiDataFieldList> GetDataFields()
        {
            return GetDataFieldsAsync().Result;
        }

        /// <summary>
        /// Lists the data fields within the account.
        /// </summary>
        public async Task<ServiceResult<ApiDataFieldList>> GetDataFieldsAsync()
        {
            var request = new Request("data-fields");
            return await GetAsync<ApiDataFieldList>(request);
        }

        /// <summary>
        /// Gets all uploaded documents.
        /// </summary>
        public ServiceResult<ApiDocumentList> GetDocumentFolderDocuments(int folderId)
        {
            return GetDocumentFolderDocumentsAsync(folderId).Result;
        }

        /// <summary>
        /// Gets all uploaded documents.
        /// </summary>
        public async Task<ServiceResult<ApiDocumentList>> GetDocumentFolderDocumentsAsync(int folderId)
        {
            var request = new Request("document-folders/{folderId}/documents",
            new Dictionary<string, object>
            {
                { "folderId", folderId }
            });
            return await GetAsync<ApiDocumentList>(request);
        }

        /// <summary>
        /// Fetches the document folder tree structure.
        /// </summary>
        public ServiceResult<ApiDocumentFolderList> GetDocumentFolders()
        {
            return GetDocumentFoldersAsync().Result;
        }

        /// <summary>
        /// Fetches the document folder tree structure.
        /// </summary>
        public async Task<ServiceResult<ApiDocumentFolderList>> GetDocumentFoldersAsync()
        {
            var request = new Request("document-folders");
            return await GetAsync<ApiDocumentFolderList>(request);
        }

        /// <summary>
        /// Gets aggregated transactional email statistics.
        /// </summary>
        public ServiceResult<ApiTransactionalEmailStatisticsList> GetEmailStatsSinceDateByStartDate(DateTime startDate, DateTime? endDate = null)
        {
            return GetEmailStatsSinceDateByStartDateAsync(startDate, endDate).Result;
        }

        /// <summary>
        /// Gets aggregated transactional email statistics.
        /// </summary>
        public async Task<ServiceResult<ApiTransactionalEmailStatisticsList>> GetEmailStatsSinceDateByStartDateAsync(DateTime startDate, DateTime? endDate = null)
        {
            var request = new Request("email/stats/since-date/{startDate}?endDate={endDate}&aggregatedBy={aggregatedBy}",
            new Dictionary<string, object>
            {
                { "startDate", startDate },
                { "endDate", endDate }
            });
            return await GetAsync<ApiTransactionalEmailStatisticsList>(request);
        }

        /// <summary>
        /// Gets an image folder by id.
        /// </summary>
        public ServiceResult<ApiImageFolder> GetImageFolderById(int id)
        {
            return GetImageFolderByIdAsync(id).Result;
        }

        /// <summary>
        /// Gets an image folder by id.
        /// </summary>
        public async Task<ServiceResult<ApiImageFolder>> GetImageFolderByIdAsync(int id)
        {
            var request = new Request("image-folders/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiImageFolder>(request);
        }

        /// <summary>
        /// Fetches the campaign image folder tree structure.
        /// </summary>
        public ServiceResult<ApiImageFolderList> GetImageFolders()
        {
            return GetImageFoldersAsync().Result;
        }

        /// <summary>
        /// Fetches the campaign image folder tree structure.
        /// </summary>
        public async Task<ServiceResult<ApiImageFolderList>> GetImageFoldersAsync()
        {
            var request = new Request("image-folders");
            return await GetAsync<ApiImageFolderList>(request);
        }

        /// <summary>
        /// Gets the preferences, as a tree structure
        /// </summary>
        public ServiceResult<ApiPreferenceList> GetPreferences()
        {
            return GetPreferencesAsync().Result;
        }

        /// <summary>
        /// Gets the preferences, as a tree structure
        /// </summary>
        public async Task<ServiceResult<ApiPreferenceList>> GetPreferencesAsync()
        {
            var request = new Request("preferences");
            return await GetAsync<ApiPreferenceList>(request);
        }

        /// <summary>
        /// Gets an array of preferences that have been modified since the specified date
        /// </summary>
        public ServiceResult GetPreferencesModifiedSinceSinceDate(DateTime sinceDate)
        {
            return GetPreferencesModifiedSinceSinceDateAsync(sinceDate).Result;
        }

        /// <summary>
        /// Gets an array of preferences that have been modified since the specified date
        /// </summary>
        public async Task<ServiceResult> GetPreferencesModifiedSinceSinceDateAsync(DateTime sinceDate)
        {
            var request = new Request("preferences/modified-since/{sinceDate}",
            new Dictionary<string, object>
            {
                { "sinceDate", sinceDate }
            });
            return await GetAsync(request);
        }

        /// <summary>
        /// Gets a program by id.
        /// </summary>
        public ServiceResult<ApiProgram> GetProgramById(int id)
        {
            return GetProgramByIdAsync(id).Result;
        }

        /// <summary>
        /// Gets a program by id.
        /// </summary>
        public async Task<ServiceResult<ApiProgram>> GetProgramByIdAsync(int id)
        {
            var request = new Request("programs/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiProgram>(request);
        }

        /// <summary>
        /// Gets all programs.
        /// </summary>
        public ServiceResult<ApiProgramList> GetPrograms(int? select = null, int? skip = null)
        {
            return GetProgramsAsync(select, skip).Result;
        }

        /// <summary>
        /// Gets all programs.
        /// </summary>
        public async Task<ServiceResult<ApiProgramList>> GetProgramsAsync(int? select = null, int? skip = null)
        {
            var request = new Request("programs?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiProgramList>(request);
        }

        /// <summary>
        /// Gets an enrolment by id.
        /// </summary>
        public ServiceResult<ApiProgramEnrolment> GetProgramsEnrolmentByEnrolmentId(Guid enrolmentId)
        {
            return GetProgramsEnrolmentByEnrolmentIdAsync(enrolmentId).Result;
        }

        /// <summary>
        /// Gets an enrolment by id.
        /// </summary>
        public async Task<ServiceResult<ApiProgramEnrolment>> GetProgramsEnrolmentByEnrolmentIdAsync(Guid enrolmentId)
        {
            var request = new Request("programs/enrolments/{enrolmentId}",
            new Dictionary<string, object>
            {
                { "enrolmentId", enrolmentId }
            });
            return await GetAsync<ApiProgramEnrolment>(request);
        }

        /// <summary>
        /// Gets enrolments by status.
        /// </summary>
        public ServiceResult<ApiProgramEnrolmentList> GetProgramsEnrolmentByStatus(ApiProgramEnrolmentStatus status, int? select = null, int? skip = null)
        {
            return GetProgramsEnrolmentByStatusAsync(status, select, skip).Result;
        }

        /// <summary>
        /// Gets enrolments by status.
        /// </summary>
        public async Task<ServiceResult<ApiProgramEnrolmentList>> GetProgramsEnrolmentByStatusAsync(ApiProgramEnrolmentStatus status, int? select = null, int? skip = null)
        {
            var request = new Request("programs/enrolments/{status}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "status", status.ToString().ToLower() },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiProgramEnrolmentList>(request);
        }

        /// <summary>
        /// Gets an enrolment by id.
        /// </summary>
        public ServiceResult GetProgramsEnrolmentReportFaults(Guid enrolmentId)
        {
            return GetProgramsEnrolmentReportFaultsAsync(enrolmentId).Result;
        }

        /// <summary>
        /// Gets an enrolment by id.
        /// </summary>
        public async Task<ServiceResult> GetProgramsEnrolmentReportFaultsAsync(Guid enrolmentId)
        {
            var request = new Request("programs/enrolments/{enrolmentId}/report-faults",
            new Dictionary<string, object>
            {
                { "enrolmentId", enrolmentId }
            });
            return await GetAsync(request);
        }

        /// <summary>
        /// Gets all segments.
        /// </summary>
        public ServiceResult<ApiSegmentList> GetSegments(int? select = null, int? skip = null)
        {
            return GetSegmentsAsync(select, skip).Result;
        }

        /// <summary>
        /// Gets all segments.
        /// </summary>
        public async Task<ServiceResult<ApiSegmentList>> GetSegmentsAsync(int? select = null, int? skip = null)
        {
            var request = new Request("segments?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiSegmentList>(request);
        }

        /// <summary>
        /// Gets the refresh progress for a segment.
        /// </summary>
        public ServiceResult<ApiSegmentRefresh> GetSegmentsRefreshById(int id)
        {
            return GetSegmentsRefreshByIdAsync(id).Result;
        }

        /// <summary>
        /// Gets the refresh progress for a segment.
        /// </summary>
        public async Task<ServiceResult<ApiSegmentRefresh>> GetSegmentsRefreshByIdAsync(int id)
        {
            var request = new Request("segments/refresh/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiSegmentRefresh>(request);
        }

        /// <summary>
        /// Gets the UTC time as set on the server.
        /// </summary>
        public ServiceResult<DateTime> GetServerTime()
        {
            return GetServerTimeAsync().Result;
        }

        /// <summary>
        /// Gets the UTC time as set on the server.
        /// </summary>
        public async Task<ServiceResult<DateTime>> GetServerTimeAsync()
        {
            var request = new Request("server-time");
            return await GetAsync<DateTime>(request);
        }

        /// <summary>
        /// [BETA] Gets a single survey by its ID.
        /// </summary>
        public ServiceResult<ApiSurvey> GetSurfysById(int id)
        {
            return GetSurfysByIdAsync(id).Result;
        }

        /// <summary>
        /// [BETA] Gets a single survey by its ID.
        /// </summary>
        public async Task<ServiceResult<ApiSurvey>> GetSurfysByIdAsync(int id)
        {
            var request = new Request("surveys/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiSurvey>(request);
        }

        /// <summary>
        /// [BETA] Gets a list of survey pages, each containing a list of the fields on that page.
        /// </summary>
        public ServiceResult<ApiSurveyPageList> GetSurfysFields(int id)
        {
            return GetSurfysFieldsAsync(id).Result;
        }

        /// <summary>
        /// [BETA] Gets a list of survey pages, each containing a list of the fields on that page.
        /// </summary>
        public async Task<ServiceResult<ApiSurveyPageList>> GetSurfysFieldsAsync(int id)
        {
            var request = new Request("surveys/{id}/fields",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiSurveyPageList>(request);
        }

        /// <summary>
        /// [BETA] Gets a list of all responses for a given survey.
        /// </summary>
        public ServiceResult<ApiSurveyResponseList> GetSurfysResponses(int id, int? select = null, int? skip = null)
        {
            return GetSurfysResponsesAsync(id, select, skip).Result;
        }

        /// <summary>
        /// [BETA] Gets a list of all responses for a given survey.
        /// </summary>
        public async Task<ServiceResult<ApiSurveyResponseList>> GetSurfysResponsesAsync(int id, int? select = null, int? skip = null)
        {
            var request = new Request("surveys/{id}/responses?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "id", id },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiSurveyResponseList>(request);
        }

        /// <summary>
        /// [BETA] Gets a list of responses that have changed since the specified date.
        /// </summary>
        public ServiceResult<ApiSurveyResponseList> GetSurfysResponsesWithActivitySinceDate(int id, DateTime date, int? select = null, int? skip = null)
        {
            return GetSurfysResponsesWithActivitySinceDateAsync(id, date, select, skip).Result;
        }

        /// <summary>
        /// [BETA] Gets a list of responses that have changed since the specified date.
        /// </summary>
        public async Task<ServiceResult<ApiSurveyResponseList>> GetSurfysResponsesWithActivitySinceDateAsync(int id, DateTime date, int? select = null, int? skip = null)
        {
            var request = new Request("surveys/{id}/responses/with-activity-since/{date}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "id", id },
                { "date", date },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiSurveyResponseList>(request);
        }

        /// <summary>
        /// [BETA] Gets a list of all surveys in the account.
        /// </summary>
        public ServiceResult<ApiSurveyList> GetSurveys(bool? assignedToAddressBookOnly = null, int? select = null, int? skip = null)
        {
            return GetSurveysAsync(assignedToAddressBookOnly, select, skip).Result;
        }

        /// <summary>
        /// [BETA] Gets a list of all surveys in the account.
        /// </summary>
        public async Task<ServiceResult<ApiSurveyList>> GetSurveysAsync(bool? assignedToAddressBookOnly = null, int? select = null, int? skip = null)
        {
            var request = new Request("surveys?assignedToAddressBookOnly={assignedToAddressBookOnly}&select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "assignedToAddressBookOnly", assignedToAddressBookOnly },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiSurveyList>(request);
        }

        /// <summary>
        /// [BETA] Gets a list of surveys in the account that have changed since the specified date.
        /// </summary>
        public ServiceResult<ApiSurveyList> GetSurveysWithActivitySinceDate(DateTime date, bool? assignedToAddressBookOnly = null, int? select = null, int? skip = null)
        {
            return GetSurveysWithActivitySinceDateAsync(date, assignedToAddressBookOnly, select, skip).Result;
        }

        /// <summary>
        /// [BETA] Gets a list of surveys in the account that have changed since the specified date.
        /// </summary>
        public async Task<ServiceResult<ApiSurveyList>> GetSurveysWithActivitySinceDateAsync(DateTime date, bool? assignedToAddressBookOnly = null, int? select = null, int? skip = null)
        {
            var request = new Request("surveys/with-activity-since/{date}?assignedToAddressBookOnly={assignedToAddressBookOnly}&select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "date", date },
                { "assignedToAddressBookOnly", assignedToAddressBookOnly },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiSurveyList>(request);
        }

        /// <summary>
        /// Gets a template by ID.
        /// </summary>
        public ServiceResult<ApiTemplate> GetTemplateById(int id)
        {
            return GetTemplateByIdAsync(id).Result;
        }

        /// <summary>
        /// Gets a template by ID.
        /// </summary>
        public async Task<ServiceResult<ApiTemplate>> GetTemplateByIdAsync(int id)
        {
            var request = new Request("templates/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await GetAsync<ApiTemplate>(request);
        }

        /// <summary>
        /// Gets list of all templates.
        /// </summary>
        public ServiceResult<ApiTemplateList> GetTemplates(int? select = null, int? skip = null)
        {
            return GetTemplatesAsync(select, skip).Result;
        }

        /// <summary>
        /// Gets list of all templates.
        /// </summary>
        public async Task<ServiceResult<ApiTemplateList>> GetTemplatesAsync(int? select = null, int? skip = null)
        {
            var request = new Request("templates?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiTemplateList>(request);
        }

        /// <summary>
        /// Gets a list of account scoped transactional data for given collection
        /// </summary>
        public ServiceResult<ApiTransactionalDataList> GetTransactionalDataByCollectionName(string collectionName, int? select = null, int? skip = null)
        {
            return GetTransactionalDataByCollectionNameAsync(collectionName, select, skip).Result;
        }

        /// <summary>
        /// Gets a list of account scoped transactional data for given collection
        /// </summary>
        public async Task<ServiceResult<ApiTransactionalDataList>> GetTransactionalDataByCollectionNameAsync(string collectionName, int? select = null, int? skip = null)
        {
            var request = new Request("transactional-data/{collectionName}?select={select}&skip={skip}",
            new Dictionary<string, object>
            {
                { "collectionName", collectionName },
                { "select", select },
                { "skip", skip }
            });
            return await GetAsync<ApiTransactionalDataList>(request);
        }
        /// <summary>
        /// Empties the account's recycle bin.
        /// </summary>
        public ServiceResult PostAccountsEmptyRecycleBin()
        {
            return PostAccountsEmptyRecycleBinAsync().Result;
        }

        /// <summary>
        /// Empties the account's recycle bin.
        /// </summary>
        public async Task<ServiceResult> PostAccountsEmptyRecycleBinAsync()
        {
            var request = new Request("accounts/empty-recycle-bin");
            return await PostAsync<ServiceResult>(request);
        }

        /// <summary>
        /// Adds a contact to a given address book.
        /// </summary>
        public ServiceResult<ApiContact> PostAddressBookContacts(int addressBookId, ApiContact apiContact)
        {
            return PostAddressBookContactsAsync(addressBookId, apiContact).Result;
        }

        /// <summary>
        /// Adds a contact to a given address book.
        /// </summary>
        public async Task<ServiceResult<ApiContact>> PostAddressBookContactsAsync(int addressBookId, ApiContact apiContact)
        {
            var request = new Request("address-books/{addressBookId}/contacts",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
            });
            return await PostAsync<ApiContact>(request, apiContact);
        }

        /// <summary>
        /// Deletes multiple contacts from an address book. This will run in the background, and for larger address books may take some minutes to fully delete.
        /// </summary>
        public ServiceResult PostAddressBookContactsDelete(int addressBookId, List<int> int32List)
        {
            return PostAddressBookContactsDeleteAsync(addressBookId, int32List).Result;
        }

        /// <summary>
        /// Deletes multiple contacts from an address book. This will run in the background, and for larger address books may take some minutes to fully delete.
        /// </summary>
        public async Task<ServiceResult> PostAddressBookContactsDeleteAsync(int addressBookId, List<int> int32List)
        {
            var request = new Request("address-books/{addressBookId}/contacts/delete",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
            });
            return await PostAsync(request, int32List);
        }

        /// <summary>
        /// Bulk creates, or bulk updates, contacts. Import format can either be CSV or Excel. Must include one column called "Email". Any other columns will attempt to map to your custom data fields. The ID of returned object can be used to query import progress.
        /// </summary>
        public ServiceResult<ApiContactImport> PostAddressBookContactsImport(int addressBookId, ApiFileMedia apiFileMedia)
        {
            return PostAddressBookContactsImportAsync(addressBookId, apiFileMedia).Result;
        }

        /// <summary>
        /// Bulk creates, or bulk updates, contacts. Import format can either be CSV or Excel. Must include one column called "Email". Any other columns will attempt to map to your custom data fields. The ID of returned object can be used to query import progress.
        /// </summary>
        public async Task<ServiceResult<ApiContactImport>> PostAddressBookContactsImportAsync(int addressBookId, ApiFileMedia apiFileMedia)
        {
            var request = new Request("address-books/{addressBookId}/contacts/import",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
            });
            return await PostAsync<ApiContactImport, ApiFileMedia>(request, apiFileMedia);
        }

        /// <summary>
        /// Bulk creates, or bulk updates, contacts with merge options. Import format can either be CSV or Excel. Must include one column called "Email". Passing a valid "mergeOption" parameter is compulsory. Any other columns will attempt to map to your custom data fields. The ID of returned object can be used to query import progress.
        /// </summary>
        public ServiceResult<ApiContactImport> PostAddressBookContactsImportWithMergeOption(int addressBookId, ApiFileMedia apiFileMedia, ApiContactMergeOptionTypes apiContactMergeOptionTypes)
        {
            return PostAddressBookContactsImportWithMergeOptionAsync(addressBookId, apiFileMedia, apiContactMergeOptionTypes).Result;
        }

        /// <summary>
        /// Bulk creates, or bulk updates, contacts with merge options. Import format can either be CSV or Excel. Must include one column called "Email". Passing a valid "mergeOption" parameter is compulsory. Any other columns will attempt to map to your custom data fields. The ID of returned object can be used to query import progress.
        /// </summary>
        public async Task<ServiceResult<ApiContactImport>> PostAddressBookContactsImportWithMergeOptionAsync(int addressBookId, ApiFileMedia apiFileMedia, ApiContactMergeOptionTypes apiContactMergeOptionTypes)
        {
            var request = new Request("address-books/{addressBookId}/contacts/import/with-merge-option/{mergeOption}",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
                { "mergeOption", apiContactMergeOptionTypes }
            });
            return await PostAsync<ApiContactImport, ApiFileMedia>(request, apiFileMedia);
        }

        /// <summary>
        /// Resubscribes a previously unsubscribed contact to a given address book.
        /// </summary>
        public ServiceResult<ApiResubscribeResult> PostAddressBookContactsResubscribe(int addressBookId, ApiContactResubscription apiContactResubscription)
        {
            return PostAddressBookContactsResubscribeAsync(addressBookId, apiContactResubscription).Result;
        }

        /// <summary>
        /// Resubscribes a previously unsubscribed contact to a given address book.
        /// </summary>
        public async Task<ServiceResult<ApiResubscribeResult>> PostAddressBookContactsResubscribeAsync(int addressBookId, ApiContactResubscription apiContactResubscription)
        {
            var request = new Request("address-books/{addressBookId}/contacts/resubscribe",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
            });
            return await PostAsync<ApiResubscribeResult, ApiContactResubscription>(request, apiContactResubscription);
        }

        /// <summary>
        /// Resubscribes a previously unsubscribed contact to a given address book with no challenge.
        /// </summary>
        public ServiceResult<ApiResubscribeResult> PostAddressBookContactsResubscribeWithNoChallenge(int addressBookId, ApiContactResubscription apiContactResubscription)
        {
            return PostAddressBookContactsResubscribeWithNoChallengeAsync(addressBookId, apiContactResubscription).Result;
        }

        /// <summary>
        /// Resubscribes a previously unsubscribed contact to a given address book with no challenge.
        /// </summary>
        public async Task<ServiceResult<ApiResubscribeResult>> PostAddressBookContactsResubscribeWithNoChallengeAsync(int addressBookId, ApiContactResubscription apiContactResubscription)
        {
            var request = new Request("address-books/{addressBookId}/contacts/resubscribe-with-no-challenge",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
            });
            return await PostAsync<ApiResubscribeResult, ApiContactResubscription>(request, apiContactResubscription);
        }

        /// <summary>
        /// Unsubscribes contact from a given address book.
        /// </summary>
        public ServiceResult<ApiContactSuppression> PostAddressBookContactsUnsubscribe(int addressBookId, ApiContact apiContact)
        {
            return PostAddressBookContactsUnsubscribeAsync(addressBookId, apiContact).Result;
        }

        /// <summary>
        /// Unsubscribes contact from a given address book.
        /// </summary>
        public async Task<ServiceResult<ApiContactSuppression>> PostAddressBookContactsUnsubscribeAsync(int addressBookId, ApiContact apiContact)
        {
            var request = new Request("address-books/{addressBookId}/contacts/unsubscribe",
            new Dictionary<string, object>
            {
                { "addressBookId", addressBookId },
            });
            return await PostAsync<ApiContactSuppression, ApiContact>(request, apiContact);
        }

        /// <summary>
        /// Creates an address book.
        /// </summary>
        public ServiceResult<ApiAddressBook> PostAddressBooks(ApiAddressBook apiAddressBook)
        {
            return PostAddressBooksAsync(apiAddressBook).Result;
        }

        /// <summary>
        /// Creates an address book.
        /// </summary>
        public async Task<ServiceResult<ApiAddressBook>> PostAddressBooksAsync(ApiAddressBook apiAddressBook)
        {
            var request = new Request("address-books");
            return await PostAsync<ApiAddressBook>(request, apiAddressBook);
        }

        /// <summary>
        /// Adds a document to a campaign as an attachment.
        /// </summary>
        public ServiceResult<ApiDocument> PostCampaignAttachments(int campaignId, ApiDocument apiDocument)
        {
            return PostCampaignAttachmentsAsync(campaignId, apiDocument).Result;
        }

        /// <summary>
        /// Adds a document to a campaign as an attachment.
        /// </summary>
        public async Task<ServiceResult<ApiDocument>> PostCampaignAttachmentsAsync(int campaignId, ApiDocument apiDocument)
        {
            var request = new Request("campaigns/{campaignId}/attachments",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId },
            });
            return await PostAsync<ApiDocument>(request, apiDocument);
        }

        /// <summary>
        /// Copies a given campaign returning the new campaign.
        /// </summary>
        public ServiceResult<ApiCampaign> PostCampaignCopy(int campaignId)
        {
            return PostCampaignCopyAsync(campaignId).Result;
        }

        /// <summary>
        /// Copies a given campaign returning the new campaign.
        /// </summary>
        public async Task<ServiceResult<ApiCampaign>> PostCampaignCopyAsync(int campaignId)
        {
            var request = new Request("campaigns/{campaignId}/copy",
            new Dictionary<string, object>
            {
                { "campaignId", campaignId }
            });
            return await PostAsync<ApiCampaign>(request);
        }

        /// <summary>
        /// Creates a campaign.
        /// </summary>
        public ServiceResult<ApiCampaign> PostCampaigns(ApiCampaign apiCampaign)
        {
            return PostCampaignsAsync(apiCampaign).Result;
        }

        /// <summary>
        /// Creates a campaign.
        /// </summary>
        public async Task<ServiceResult<ApiCampaign>> PostCampaignsAsync(ApiCampaign apiCampaign)
        {
            var request = new Request("campaigns");
            return await PostAsync<ApiCampaign>(request, apiCampaign);
        }

        /// <summary>
        /// Sends a specified campaign to one or more address books, segments or contacts at a specified time. Leave the address book array empty to send to All Contacts.
        /// </summary>
        public ServiceResult<ApiCampaignSend> PostCampaignsSend(ApiCampaignSend apiCampaignSend)
        {
            return PostCampaignsSendAsync(apiCampaignSend).Result;
        }

        /// <summary>
        /// Sends a specified campaign to one or more address books, segments or contacts at a specified time. Leave the address book array empty to send to All Contacts.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignSend>> PostCampaignsSendAsync(ApiCampaignSend apiCampaignSend)
        {
            var request = new Request("campaigns/send");
            return await PostAsync<ApiCampaignSend>(request, apiCampaignSend);
        }

        /// <summary>
        /// Sends a specified campaign to one or more address books, segments or contacts at the most appropriate time based upon their previous open. Leave the address book array empty to send to All Contacts.
        /// </summary>
        public ServiceResult<ApiCampaignSend> PostCampaignsSendTimeOptimised(ApiCampaignSend apiCampaignSend)
        {
            return PostCampaignsSendTimeOptimisedAsync(apiCampaignSend).Result;
        }

        /// <summary>
        /// Sends a specified campaign to one or more address books, segments or contacts at the most appropriate time based upon their previous open. Leave the address book array empty to send to All Contacts.
        /// </summary>
        public async Task<ServiceResult<ApiCampaignSend>> PostCampaignsSendTimeOptimisedAsync(ApiCampaignSend apiCampaignSend)
        {
            var request = new Request("campaigns/send-time-optimised");
            return await PostAsync<ApiCampaignSend>(request, apiCampaignSend);
        }

        /// <summary>
        /// Creates a split test campaign.
        /// </summary>
        public ServiceResult<ApiSplitTestCampaign> PostCampaignsSplitTest(ApiSplitTestCampaign apiSplitTestCampaign)
        {
            return PostCampaignsSplitTestAsync(apiSplitTestCampaign).Result;
        }

        /// <summary>
        /// Creates a split test campaign.
        /// </summary>
        public async Task<ServiceResult<ApiSplitTestCampaign>> PostCampaignsSplitTestAsync(ApiSplitTestCampaign apiSplitTestCampaign)
        {
            var request = new Request("campaigns/split-test");
            return await PostAsync<ApiSplitTestCampaign>(request, apiSplitTestCampaign);
        }

        /// <summary>
        /// Creates a contact.
        /// </summary>
        public ServiceResult<ApiContact> PostContacts(ApiContact apiContact)
        {
            return PostContactsAsync(apiContact).Result;
        }

        /// <summary>
        /// Creates a contact.
        /// </summary>
        public async Task<ServiceResult<ApiContact>> PostContactsAsync(ApiContact apiContact)
        {
            var request = new Request("contacts");
            return await PostAsync<ApiContact>(request, apiContact);
        }

        /// <summary>
        /// Bulk creates, or bulk updates, contacts. Import format can either be CSV or Excel. Must include one column called "Email". Any other columns will attempt to map to your custom data fields. The ID of returned object can be used to query import progress.
        /// </summary>
        public ServiceResult<ApiContactImport> PostContactsImport(ApiFileMedia apiFileMedia)
        {
            return PostContactsImportAsync(apiFileMedia).Result;
        }

        /// <summary>
        /// Bulk creates, or bulk updates, contacts. Import format can either be CSV or Excel. Must include one column called "Email". Any other columns will attempt to map to your custom data fields. The ID of returned object can be used to query import progress.
        /// </summary>
        public async Task<ServiceResult<ApiContactImport>> PostContactsImportAsync(ApiFileMedia apiFileMedia)
        {
            var request = new Request("contacts/import");
            return await PostAsync<ApiContactImport, ApiFileMedia>(request, apiFileMedia);
        }

        /// <summary>
        /// Bulk creates, or bulk updates, contacts with merge options. This API works on both contact data fields and marketing preferences. Import format can either be CSV or Excel. Must include one column called "Email". Passing a valid "mergeOption" parameter is compulsory. Any other columns will attempt to map to your custom data fields. The ID of returned object can be used to query import progress.
        /// </summary>
        public ServiceResult<ApiContactImport> PostContactsImportWithMergeOption(ApiFileMedia apiFileMedia, ApiContactMergeOptionTypes apiContactMergeOptionTypes)
        {
            return PostContactsImportWithMergeOptionAsync(apiFileMedia, apiContactMergeOptionTypes).Result;
        }

        /// <summary>
        /// Bulk creates, or bulk updates, contacts with merge options. This API works on both contact data fields and marketing preferences. Import format can either be CSV or Excel. Must include one column called "Email". Passing a valid "mergeOption" parameter is compulsory. Any other columns will attempt to map to your custom data fields. The ID of returned object can be used to query import progress.
        /// </summary>
        public async Task<ServiceResult<ApiContactImport>> PostContactsImportWithMergeOptionAsync(ApiFileMedia apiFileMedia, ApiContactMergeOptionTypes apiContactMergeOptionTypes)
        {
            var request = new Request("contacts/import/with-merge-option/{mergeOption}");
            return await PostAsync<ApiContactImport, ApiFileMedia>(request, apiFileMedia);
        }

        /// <summary>
        /// Resubscribes a previously unsubscribed contact.
        /// </summary>
        public ServiceResult<ApiResubscribeResult> PostContactsResubscribe(ApiContactResubscription apiContactResubscription)
        {
            return PostContactsResubscribeAsync(apiContactResubscription).Result;
        }

        /// <summary>
        /// Resubscribes a previously unsubscribed contact.
        /// </summary>
        public async Task<ServiceResult<ApiResubscribeResult>> PostContactsResubscribeAsync(ApiContactResubscription apiContactResubscription)
        {
            var request = new Request("contacts/resubscribe");
            return await PostAsync<ApiResubscribeResult, ApiContactResubscription>(request, apiContactResubscription);
        }

        /// <summary>
        /// Resubscribes a previously unsubscribed contact with no challenge.
        /// </summary>
        public ServiceResult<ApiResubscribeResult> PostContactsResubscribeWithNoChallenge(ApiContactResubscription apiContactResubscription)
        {
            return PostContactsResubscribeWithNoChallengeAsync(apiContactResubscription).Result;
        }

        /// <summary>
        /// Resubscribes a previously unsubscribed contact with no challenge.
        /// </summary>
        public async Task<ServiceResult<ApiResubscribeResult>> PostContactsResubscribeWithNoChallengeAsync(ApiContactResubscription apiContactResubscription)
        {
            var request = new Request("contacts/resubscribe-with-no-challenge");
            return await PostAsync<ApiResubscribeResult, ApiContactResubscription>(request, apiContactResubscription);
        }

        /// <summary>
        /// Replaces a piece of transactional data by key (logicall equivalent to a delete and an insert).
        /// </summary>
        public ServiceResult<ApiTransactionalData> PostContactsTransactionalData(string collectionName, string key, ApiJsonData apiJsonData)
        {
            return PostContactsTransactionalDataAsync(collectionName, key, apiJsonData).Result;
        }

        /// <summary>
        /// Replaces a piece of transactional data by key (logicall equivalent to a delete and an insert).
        /// </summary>
        public async Task<ServiceResult<ApiTransactionalData>> PostContactsTransactionalDataAsync(string collectionName, string key, ApiJsonData apiJsonData)
        {
            var request = new Request("contacts/transactional-data/{collectionName}/{key}",
            new Dictionary<string, object>
            {
                { "collectionName", collectionName },
                { "key", key },
            });
            return await PostAsync<ApiTransactionalData, ApiJsonData>(request, apiJsonData);
        }

        /// <summary>
        /// Adds a single piece of transactional data to a contact.
        /// </summary>
        public ServiceResult<ApiTransactionalData> PostContactsTransactionalData(string collectionName)
        {
            return PostContactsTransactionalDataAsync(collectionName).Result;
        }

        /// <summary>
        /// Adds a single piece of transactional data to a contact.
        /// </summary>
        public async Task<ServiceResult<ApiTransactionalData>> PostContactsTransactionalDataAsync(string collectionName)
        {
            var request = new Request("contacts/transactional-data/{collectionName}?Key={Key}&ContactIdentifier={ContactIdentifier}&Json={Json}",
            new Dictionary<string, object>
            {
                { "collectionName", collectionName }
            });
            return await PostAsync<ApiTransactionalData>(request);
        }

        /// <summary>
        /// Adds multiple pieces of transactional data to contacts asynchronously, returning an identifier that can be used to check for import progress.
        /// </summary>
        public ServiceResult<ApiTransactionalDataImport> PostContactsTransactionalDataImport(string collectionName, ApiTransactionalDataList apiTransactionalData)
        {
            return PostContactsTransactionalDataImportAsync(collectionName, apiTransactionalData).Result;
        }

        /// <summary>
        /// Adds multiple pieces of transactional data to contacts asynchronously, returning an identifier that can be used to check for import progress.
        /// </summary>
        public async Task<ServiceResult<ApiTransactionalDataImport>> PostContactsTransactionalDataImportAsync(string collectionName, ApiTransactionalDataList apiTransactionalData)
        {
            var request = new Request("contacts/transactional-data/import/{collectionName}",
            new Dictionary<string, object>
            {
                { "collectionName", collectionName }
            });
            return await PostAsync<ApiTransactionalDataImport, ApiTransactionalDataList>(request, apiTransactionalData);
        }

        /// <summary>
        /// Unsubscribes contact from account.
        /// </summary>
        public ServiceResult<ApiContactSuppression> PostContactsUnsubscribe(ApiContact apiContact)
        {
            return PostContactsUnsubscribeAsync(apiContact).Result;
        }

        /// <summary>
        /// Unsubscribes contact from account.
        /// </summary>
        public async Task<ServiceResult<ApiContactSuppression>> PostContactsUnsubscribeAsync(ApiContact apiContact)
        {
            var request = new Request("contacts/unsubscribe");
            return await PostAsync<ApiContactSuppression, ApiContact>(request, apiContact);
        }

        /// <summary>
        /// Creates a contact with consent records.
        /// </summary>
        public ServiceResult<ApiContactWithConsent> PostContactsWithConsent(ApiContactWithConsent apiContactWithConsent)
        {
            return PostContactsWithConsentAsync(apiContactWithConsent).Result;
        }

        /// <summary>
        /// Creates a contact with consent records.
        /// </summary>
        public async Task<ServiceResult<ApiContactWithConsent>> PostContactsWithConsentAsync(ApiContactWithConsent apiContactWithConsent)
        {
            var request = new Request("contacts/with-consent");
            return await PostAsync<ApiContactWithConsent>(request, apiContactWithConsent);
        }

        /// <summary>
        /// Creates a contact with consent and preference records.
        /// </summary>
        public ServiceResult<ApiContactWithConsentAndPreferences> PostContactsWithConsentAndPreferences(ApiContactWithConsentAndPreferences apiContactWithConsentAndPreferences)
        {
            return PostContactsWithConsentAndPreferencesAsync(apiContactWithConsentAndPreferences).Result;
        }

        /// <summary>
        /// Creates a contact with consent and preference records.
        /// </summary>
        public async Task<ServiceResult<ApiContactWithConsentAndPreferences>> PostContactsWithConsentAndPreferencesAsync(ApiContactWithConsentAndPreferences apiContactWithConsentAndPreferences)
        {
            var request = new Request("contacts/with-consent-and-preferences");
            return await PostAsync<ApiContactWithConsentAndPreferences>(request, apiContactWithConsentAndPreferences);
        }

        /// <summary>
        /// Creates a data field within the account.
        /// </summary>
        public ServiceResult PostDataFields(ApiDataField apiDataField)
        {
            return PostDataFieldsAsync(apiDataField).Result;
        }

        /// <summary>
        /// Creates a data field within the account.
        /// </summary>
        public async Task<ServiceResult> PostDataFieldsAsync(ApiDataField apiDataField)
        {
            var request = new Request("data-fields");
            return await PostAsync(request, apiDataField);
        }

        /// <summary>
        /// Creates a new document folder.
        /// </summary>
        public ServiceResult<ApiDocumentFolder> PostDocumentFolder(int folderId, ApiDocumentFolder apiDocumentFolder)
        {
            return PostDocumentFolderAsync(folderId, apiDocumentFolder).Result;
        }

        /// <summary>
        /// Creates a new document folder.
        /// </summary>
        public async Task<ServiceResult<ApiDocumentFolder>> PostDocumentFolderAsync(int folderId, ApiDocumentFolder apiDocumentFolder)
        {
            var request = new Request("document-folders/{folderId}",
            new Dictionary<string, object>
            {
                { "folderId", folderId },
            });
            return await PostAsync<ApiDocumentFolder>(request, apiDocumentFolder);
        }

        /// <summary>
        /// Upload a document to the specified folder.
        /// </summary>
        public ServiceResult<ApiDocument> PostDocumentFolderDocuments(int folderId, ApiFileMedia apiFileMedia)
        {
            return PostDocumentFolderDocumentsAsync(folderId, apiFileMedia).Result;
        }

        /// <summary>
        /// Upload a document to the specified folder.
        /// </summary>
        public async Task<ServiceResult<ApiDocument>> PostDocumentFolderDocumentsAsync(int folderId, ApiFileMedia apiFileMedia)
        {
            var request = new Request("document-folders/{folderId}/documents",
            new Dictionary<string, object>
            {
                { "folderId", folderId },
            });
            return await PostAsync<ApiDocument, ApiFileMedia>(request, apiFileMedia);
        }

        /// <summary>
        /// Sends a transactional email. If sending to multiple recipients, please separate addresses with a comma.
        /// </summary>
        public ServiceResult PostEmail(ApiTransactionalEmail apiTransactionalEmail)
        {
            return PostEmailAsync(apiTransactionalEmail).Result;
        }

        /// <summary>
        /// Sends a transactional email. If sending to multiple recipients, please separate addresses with a comma.
        /// </summary>
        public async Task<ServiceResult> PostEmailAsync(ApiTransactionalEmail apiTransactionalEmail)
        {
            var request = new Request("email");
            return await PostAsync(request, apiTransactionalEmail);
        }

        /// <summary>
        /// Sends a transactional email with content taken from a triggered campaign. If sending to multiple recipients, please separate addresses with a comma.
        /// </summary>
        public ServiceResult PostEmailTriggeredCampaign(ApiTransactionalEmailTriggeredCampaign apiTransactionalEmailTriggeredCampaign)
        {
            return PostEmailTriggeredCampaignAsync(apiTransactionalEmailTriggeredCampaign).Result;
        }

        /// <summary>
        /// Sends a transactional email with content taken from a triggered campaign. If sending to multiple recipients, please separate addresses with a comma.
        /// </summary>
        public async Task<ServiceResult> PostEmailTriggeredCampaignAsync(ApiTransactionalEmailTriggeredCampaign apiTransactionalEmailTriggeredCampaign)
        {
            var request = new Request("email/triggered-campaign");
            return await PostAsync(request, apiTransactionalEmailTriggeredCampaign);
        }

        /// <summary>
        /// Creates a new campaign image folder.
        /// </summary>
        public ServiceResult<ApiImageFolder> PostImageFolder(int id, ApiImageFolder apiImageFolder)
        {
            return PostImageFolderAsync(id, apiImageFolder).Result;
        }

        /// <summary>
        /// Creates a new campaign image folder.
        /// </summary>
        public async Task<ServiceResult<ApiImageFolder>> PostImageFolderAsync(int id, ApiImageFolder apiImageFolder)
        {
            var request = new Request("image-folders/{id}",
            new Dictionary<string, object>
            {
                { "id", id },
            });
            return await PostAsync<ApiImageFolder>(request, apiImageFolder);
        }

        /// <summary>
        /// Uploads a new campaign image to the specified folder.
        /// </summary>
        public ServiceResult<ApiImage> PostImageFolderImages(int folderId, ApiFileMedia apiFileMedia)
        {
            return PostImageFolderImagesAsync(folderId, apiFileMedia).Result;
        }

        /// <summary>
        /// Uploads a new campaign image to the specified folder.
        /// </summary>
        public async Task<ServiceResult<ApiImage>> PostImageFolderImagesAsync(int folderId, ApiFileMedia apiFileMedia)
        {
            var request = new Request("image-folders/{folderId}/images",
            new Dictionary<string, object>
            {
                { "folderId", folderId },
            });
            return await PostAsync<ApiImage, ApiFileMedia>(request, apiFileMedia);
        }

        /// <summary>
        /// Creates a new preference or a new preference category
        /// </summary>
        public ServiceResult PostPreference(ApiPreference apiPreference)
        {
            return PostPreferenceAsync(apiPreference).Result;
        }

        /// <summary>
        /// Creates a new preference or a new preference category
        /// </summary>
        public async Task<ServiceResult> PostPreferenceAsync(ApiPreference apiPreference)
        {
            var request = new Request("preference");
            return await PostAsync(request, apiPreference);
        }

        /// <summary>
        /// Creates an enrolment. Please note that your account can only call this a maximum of 20 times per hour, across all programs
        /// </summary>
        public ServiceResult<ApiProgramEnrolment> PostProgramsEnrolments(ApiProgramEnrolment apiProgramEnrolment)
        {
            return PostProgramsEnrolmentsAsync(apiProgramEnrolment).Result;
        }

        /// <summary>
        /// Creates an enrolment. Please note that your account can only call this a maximum of 20 times per hour, across all programs
        /// </summary>
        public async Task<ServiceResult<ApiProgramEnrolment>> PostProgramsEnrolmentsAsync(ApiProgramEnrolment apiProgramEnrolment)
        {
            var request = new Request("programs/enrolments");
            return await PostAsync<ApiProgramEnrolment>(request, apiProgramEnrolment);
        }

        /// <summary>
        /// Refreshes a segment by ID.
        /// </summary>
        public ServiceResult<ApiSegmentRefresh> PostSegmentsRefresh(int id)
        {
            return PostSegmentsRefreshAsync(id).Result;
        }

        /// <summary>
        /// Refreshes a segment by ID.
        /// </summary>
        public async Task<ServiceResult<ApiSegmentRefresh>> PostSegmentsRefreshAsync(int id)
        {
            var request = new Request("segments/refresh/{id}",
            new Dictionary<string, object>
            {
                { "id", id }
            });
            return await PostAsync<ApiSegmentRefresh>(request);
        }

        /// <summary>
        /// Send a single SMS message.
        /// </summary>
        public ServiceResult PostSmsMessagesSendTo(string telephoneNumber, ApiSms apiSms)
        {
            return PostSmsMessagesSendToAsync(telephoneNumber, apiSms).Result;
        }

        /// <summary>
        /// Send a single SMS message.
        /// </summary>
        public async Task<ServiceResult> PostSmsMessagesSendToAsync(string telephoneNumber, ApiSms apiSms)
        {
            var request = new Request("sms-messages/send-to/{telephoneNumber}",
            new Dictionary<string, object>
            {
                { "telephoneNumber", telephoneNumber },
            });
            return await PostAsync(request, apiSms);
        }

        /// <summary>
        /// Creates a template.
        /// </summary>
        public ServiceResult<ApiTemplate> PostTemplates(ApiTemplate apiTemplate)
        {
            return PostTemplatesAsync(apiTemplate).Result;
        }

        /// <summary>
        /// Creates a template.
        /// </summary>
        public async Task<ServiceResult<ApiTemplate>> PostTemplatesAsync(ApiTemplate apiTemplate)
        {
            var request = new Request("templates");
            return await PostAsync<ApiTemplate>(request, apiTemplate);
        }

        /// <summary>
        /// Updates an address book.
        /// </summary>
        public ServiceResult<ApiAddressBook> UpdateAddressBook(int id, ApiAddressBook apiAddressBook)
        {
            return UpdateAddressBookAsync(id, apiAddressBook).Result;
        }

        /// <summary>
        /// Updates an address book.
        /// </summary>
        public async Task<ServiceResult<ApiAddressBook>> UpdateAddressBookAsync(int id, ApiAddressBook apiAddressBook)
        {
            var request = new Request("address-books/{id}",
            new Dictionary<string, object>
            {
                { "id", id },
            });
            return await PutAsync<ApiAddressBook>(request, apiAddressBook);
        }

        /// <summary>
        /// Updates a given campaign.
        /// </summary>
        public ServiceResult<ApiCampaign> UpdateCampaign(int id, ApiCampaign apiCampaign)
        {
            return UpdateCampaignAsync(id, apiCampaign).Result;
        }

        /// <summary>
        /// Updates a given campaign.
        /// </summary>
        public async Task<ServiceResult<ApiCampaign>> UpdateCampaignAsync(int id, ApiCampaign apiCampaign)
        {
            var request = new Request("campaigns/{id}",
            new Dictionary<string, object>
            {
                { "id", id },
            });
            return await PutAsync<ApiCampaign>(request, apiCampaign);
        }

        /// <summary>
        /// Updates a contact.
        /// </summary>
        public ServiceResult<ApiContact> UpdateContact(int id, ApiContact apiContact)
        {
            return UpdateContactAsync(id, apiContact).Result;
        }

        /// <summary>
        /// Updates a contact.
        /// </summary>
        public async Task<ServiceResult<ApiContact>> UpdateContactAsync(int id, ApiContact apiContact)
        {
            var request = new Request("contacts/{id}",
            new Dictionary<string, object>
            {
                { "id", id },
            });
            return await PutAsync<ApiContact>(request, apiContact);
        }

        /// <summary>
        /// Sets the subscribed preferences for a contact
        /// </summary>
        public ServiceResult UpdateContactPreferences(string contactEmail, ApiPreferenceList apiPreferenceList)
        {
            return UpdateContactPreferencesAsync(contactEmail, apiPreferenceList).Result;
        }

        /// <summary>
        /// Sets the subscribed preferences for a contact
        /// </summary>
        public async Task<ServiceResult> UpdateContactPreferencesAsync(string contactEmail, ApiPreferenceList apiPreferenceList)
        {
            var request = new Request("contact/{contactEmail}/preferences",
            new Dictionary<string, object>
            {
                { "contactEmail", contactEmail },
            });
            return await PutAsync(request, apiPreferenceList);
        }

        /// <summary>
        /// Sets the subscribed preferences for a contact
        /// </summary>
        public ServiceResult UpdateContactPreferences(int contactId, ApiPreferenceList apiPreferenceList)
        {
            return UpdateContactPreferencesAsync(contactId, apiPreferenceList).Result;
        }

        /// <summary>
        /// Sets the subscribed preferences for a contact
        /// </summary>
        public async Task<ServiceResult> UpdateContactPreferencesAsync(int contactId, ApiPreferenceList apiPreferenceList)
        {
            var request = new Request("contact/{contactId}/preferences",
            new Dictionary<string, object>
            {
                { "contactId", contactId },
            });
            return await PutAsync(request, apiPreferenceList);
        }

        /// <summary>
        /// Updates a contact with consent records.
        /// </summary>
        public ServiceResult<ApiContactWithConsent> UpdateContactWithConsent(int id, ApiContactWithConsent apiContactWithConsent)
        {
            return UpdateContactWithConsentAsync(id, apiContactWithConsent).Result;
        }

        /// <summary>
        /// Updates a contact with consent records.
        /// </summary>
        public async Task<ServiceResult<ApiContactWithConsent>> UpdateContactWithConsentAsync(int id, ApiContactWithConsent apiContactWithConsent)
        {
            var request = new Request("contacts/{id}/with-consent",
            new Dictionary<string, object>
            {
                { "id", id },
            });
            return await PutAsync<ApiContactWithConsent>(request, apiContactWithConsent);
        }

        /// <summary>
        /// Updates a contact with consent and preference records.
        /// </summary>
        public ServiceResult<ApiContactWithConsentAndPreferences> UpdateContactWithConsentAndPreferences(int id, ApiContactWithConsentAndPreferences apiContactWithConsentAndPreferences)
        {
            return UpdateContactWithConsentAndPreferencesAsync(id, apiContactWithConsentAndPreferences).Result;
        }

        /// <summary>
        /// Updates a contact with consent and preference records.
        /// </summary>
        public async Task<ServiceResult<ApiContactWithConsentAndPreferences>> UpdateContactWithConsentAndPreferencesAsync(int id, ApiContactWithConsentAndPreferences apiContactWithConsentAndPreferences)
        {
            var request = new Request("contacts/{id}/with-consent-and-preferences",
            new Dictionary<string, object>
            {
                { "id", id },
            });
            return await PutAsync<ApiContactWithConsentAndPreferences>(request, apiContactWithConsentAndPreferences);
        }

        /// <summary>
        /// Update the preference with the specified Id
        /// </summary>
        public ServiceResult<ApiPreference> UpdatePreference(ApiPreference apiPreference)
        {
            return UpdatePreferenceAsync(apiPreference).Result;
        }

        /// <summary>
        /// Update the preference with the specified Id
        /// </summary>
        public async Task<ServiceResult<ApiPreference>> UpdatePreferenceAsync(ApiPreference apiPreference)
        {
            var request = new Request("preference");
            return await PutAsync<ApiPreference>(request, apiPreference);
        }

        /// <summary>
        /// Updates a template.
        /// </summary>
        public ServiceResult<ApiTemplate> UpdateTemplate(int id, ApiTemplate apiTemplate)
        {
            return UpdateTemplateAsync(id, apiTemplate).Result;
        }

        /// <summary>
        /// Updates a template.
        /// </summary>
        public async Task<ServiceResult<ApiTemplate>> UpdateTemplateAsync(int id, ApiTemplate apiTemplate)
        {
            var request = new Request("templates/{id}",
            new Dictionary<string, object>
            {
                { "id", id },
            });
            return await PutAsync<ApiTemplate>(request, apiTemplate);
        }


    }
}
